# !!! not actually a template yet. No vars.
# docs
#   https://docs.haproxy.org/2.4/configuration.html
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # View activity log messages with these commands.
    #   grep haproxy /var/log/messages
    #   journalctl -u haproxy.service
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM
    #ssl-default-bind-options ssl-min-ver TLSv1.2

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# redirect port 80 to port 443
#
frontend www_http
  bind *:80
  http-request redirect scheme https unless { ssl_fc }

#---------------------------------------------------------------------
# one web site with many paths
#
frontend www_https
  bind *:443 ssl crt /etc/letsencrypt/live/hardiman.consulting/combined.pem
  default_backend web
  use_backend antora     if { path_beg -i /antora/ }
  use_backend aapcontrol if { path_beg -i /aapcontrol/ }
  use_backend aaphub     if { path_beg -i /aaphub/ }
  use_backend git        if { path_beg -i /git/ }
  use_backend grafana    if { path_beg -i /grafana/ }
  use_backend id         if { path_beg -i /id/ }
  use_backend satellite  if { path_beg -i /satellite/ }
  use_backend secret     if { path_beg -i /secret/ }

#---------------------------------------------------------------------
# proxy to where
#
backend web
   mode http
   server customer.supply.example.com 192.168.15.9:443 ssl verify required ca-file /etc/pki/ca-trust/source/anchors/ca.supply.example.com-cert.pem

# These all require path munging to make proxying work.
# Remove path before sending it to backend.
# Add path to location on response from backend.
# eg. 
# remove path "/antora" from requests
# https://hardiman.consulting/antora/rhel/9/index.html
# to
# https://customer.supply.example.com/rhel/9/index.html
# and add it back to the "Location" header of replies 
# (that header is usually not present - it's used for redirects).

backend antora
  mode http
  server customer.supply.example.com 192.168.15.9:80
  #server customer.supply.example.com 192.168.15.9:443 ssl verify required ca-file /etc/pki/ca-trust/source/anchors/ca.supply.example.com-cert.pem
  http-request set-header host customer.supply.example.com
  http-request replace-path /antora(.*) \1
  http-response replace-header Location (.*) /antora/\1

backend aapcontrol
  mode http
  server aapcontrol.build.example.com 192.168.13.7:443 ssl verify required ca-file /etc/pki/ca-trust/source/anchors/ca.build.example.com-cert.pem
  http-request set-header host aapcontrol.build.example.com
  http-request replace-path /aapcontrol(.*) \1
  http-response replace-header Location (.*) /aapcontrol/\1

backend aaphub
  mode http
  server aaphub.build.example.com 192.168.13.6:443 ssl verify required ca-file /etc/pki/ca-trust/source/anchors/ca.build.example.com-cert.pem
  http-request set-header host aaphub.build.example.com
  http-request replace-path /aaphub(.*) \1
  http-response replace-header Location (.*) /aaphub/\1

backend git
  mode http
  server git.source.example.com 192.168.11.7:443 ssl verify required ca-file /etc/pki/ca-trust/source/anchors/ca.source.example.com-cert.pem
  http-request set-header host git.source.example.com
  http-request replace-path /git(.*) \1
  http-response replace-header Location (.*) /git/\1

backend grafana
  mode http
  server monitor.supply.example.com 192.168.15.8:3000 
  http-request set-header host monitor.supply.example.com
  http-request replace-path /grafana(.*) \1
  http-response replace-header Location (.*) /grafana/\1

backend id
  mode http
  server id.build.example.com 192.168.13.4:443 ssl verify required ca-file /etc/pki/ca-trust/source/anchors/ca.build.example.com-cert.pem
  http-request set-header host id.build.example.com
  http-request replace-path /id(.*) \1
  http-response replace-header Location (.*) /id/\1

backend satellite
  mode http
  server satellite.build.example.com 192.168.13.5:443 ssl verify required ca-file /etc/pki/ca-trust/source/anchors/ca.build.example.com-cert.pem
  http-request set-header host satellite.build.example.com
  http-request replace-path /satellite(.*) \1
  http-response replace-header Location (.*) /satellite/\1

backend secret
  mode http
  server secret.source.example.com 192.168.11.8:443 ssl verify required ca-file /etc/pki/ca-trust/source/anchors/ca.source.example.com-cert.pem
  http-request set-header host secret.source.example.com
  http-request replace-path /secret(.*) \1
  http-response replace-header Location (.*) /secret/\1


#---------------------------------------------------------------------
# dashboard
#
listen stats
    bind :9000
    stats enable
    stats uri /
